# import os
# import json
# import requests
# from telegram import Update
# from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# # Telegram Bot Token'Ä±nÄ± buraya ekleyin
# TELEGRAM_BOT_TOKEN = "7486287124:AAHwsf8A5MIQRKq9bEFRV0jSKsvzSEu1Lrw"
# AI_API_URL = "https://ai-text-to-image.yenitest.workers.dev/"  # Cloudflare Worker API URL

# async def start(update: Update, context: CallbackContext):
#     """Botun baÅŸlangÄ±Ã§ mesajÄ±nÄ± gÃ¶nderir."""
#     await update.message.reply_text("Merhaba! Bana bir kelime veya cÃ¼mle gÃ¶nder, yapay zeka ile bir gÃ¶rsel oluÅŸturalÄ±m!")

# async def generate_image(update: Update, context: CallbackContext):
#     """KullanÄ±cÄ±nÄ±n gÃ¶nderdiÄŸi metni alÄ±r, API'ye istek yapar ve resmi gÃ¶nderir."""
#     user_input = update.message.text

#     payload = {"prompt": user_input}
#     headers = {"Content-Type": "application/json"}

#     try:
#         response = requests.post(AI_API_URL, json=payload, headers=headers)

#         if response.status_code == 200:
#             result = response.json()
#             image_url = result.get("imageUrl", "")

#             if image_url:
#                 await update.message.reply_photo(photo=image_url, caption="Ä°ÅŸte senin gÃ¶rselin! ðŸŽ¨")
#             else:
#                 await update.message.reply_text("GÃ¶rsel oluÅŸturulamadÄ±. LÃ¼tfen tekrar deneyin.")
#         else:
#             await update.message.reply_text("API'de bir hata oluÅŸtu. Daha sonra tekrar deneyin.")

#     except Exception as e:
#         await update.message.reply_text(f"Hata oluÅŸtu: {str(e)}")

# def main():
#     """Telegram botunu baÅŸlatÄ±r."""
#     app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

#     # KomutlarÄ± ekleyelim
#     app.add_handler(CommandHandler("start", start))
#     app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, generate_image))

#     print("Bot Ã§alÄ±ÅŸÄ±yor...")
#     app.run_polling()

# if __name__ == "__main__":
#     main()


#?============================================================================================================

# import io
# import requests
# from telegram import Update
# from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# # Telegram Bot Token'Ä±nÄ±zÄ± buraya ekleyin
# TELEGRAM_BOT_TOKEN = "7486287124:AAHwsf8A5MIQRKq9bEFRV0jSKsvzSEu1Lrw"

# # Cloudflare Worker API endpoint'iniz
# WORKER_ENDPOINT = "https://ai-text-to-image.yenitest.workers.dev/"

# async def start(update: Update, context: CallbackContext):
#     await update.message.reply_text("Merhaba! LÃ¼tfen bir prompt gÃ¶nderin, gÃ¶rsel oluÅŸturuluyor...")

# async def generate_image(update: Update, context: CallbackContext):
#     prompt = update.message.text
#     await update.message.reply_text("GÃ¶rsel oluÅŸturuluyor, lÃ¼tfen bekleyin...")

#     try:
#         # Worker endpoint'ine POST isteÄŸi gÃ¶nderiyoruz (JSON formatÄ±nda prompt gÃ¶nderiyoruz)
#         response = requests.post(WORKER_ENDPOINT, json={"prompt": prompt})
        
#         if response.status_code == 200:
#             # YanÄ±t binary veri (image/png) olarak geldiÄŸi iÃ§in response.json() kullanamayÄ±z.
#             # Binary veriyi BytesIO ile Telegram'a gÃ¶nderilebilir hale getiriyoruz.
#             image_bytes = response.content
#             bio = io.BytesIO(image_bytes)
#             bio.name = "generated.png"  # Dosya adÄ± belirtiyoruz

#             await update.message.reply_photo(photo=bio)
#         else:
#             await update.message.reply_text("Serviste bir hata oluÅŸtu. LÃ¼tfen tekrar deneyin.")
#     except Exception as e:
#         await update.message.reply_text(f"Hata oluÅŸtu: {str(e)}")

# def main():
#     app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

#     app.add_handler(CommandHandler("start", start))
#     app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, generate_image))

#     print("Bot Ã§alÄ±ÅŸÄ±yor...")
#     app.run_polling()

# if __name__ == "__main__":
#     main()



#?============================================================================================================


import io
import logging
import requests
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackContext,
)
import os
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
# KonuÅŸma durumu sabiti
SELECT_MODEL = 0

# Logging ayarlarÄ±
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# KullanÄ±cÄ±nÄ±n gÃ¶nderdiÄŸi prompt'u alÄ±p model seÃ§imi iÃ§in inline butonlarÄ± gÃ¶steren giriÅŸ fonksiyonu
async def handle_prompt(update: Update, context: CallbackContext) -> int:
    prompt = update.message.text
    context.user_data['prompt'] = prompt
    keyboard = [
        [InlineKeyboardButton("Flux", callback_data="flux")],
        [InlineKeyboardButton("SDXL", callback_data="sdxl")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("LÃ¼tfen bir model seÃ§in:", reply_markup=reply_markup)
    return SELECT_MODEL

# Inline butonlardan model seÃ§ildiÄŸinde Ã§alÄ±ÅŸacak fonksiyon
async def select_model(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    selected_model = query.data
    prompt = context.user_data.get('prompt')
    if not prompt:
        await query.edit_message_text("Prompt bulunamadÄ±, lÃ¼tfen tekrar deneyin.")
        return ConversationHandler.END
    await query.edit_message_text(f"SeÃ§ilen model: {selected_model.upper()}\nGÃ¶rsel oluÅŸturuluyor, lÃ¼tfen bekleyin...")

    # Cloudflare Worker API endpoint'iniz
    WORKER_ENDPOINT = "https://ai-text-to-image.yenitest.workers.dev/"
    payload = {"prompt": prompt, "model": selected_model}
    
    try:
        response = requests.post(WORKER_ENDPOINT, json=payload)
        if response.status_code == 200:
            image_bytes = response.content
            bio = io.BytesIO(image_bytes)
            bio.name = "generated.jpg"
            await query.message.reply_photo(photo=bio)
        else:
            await query.message.reply_text(f"API hatasÄ±: {response.status_code}\n{response.text}")
    except Exception as e:
        logger.error(f"API isteÄŸi sÄ±rasÄ±nda hata: {e}")
        await query.message.reply_text(f"Hata oluÅŸtu: {e}")

    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("Ä°ÅŸlem iptal edildi.")
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_prompt)],
        states={
            SELECT_MODEL: [CallbackQueryHandler(select_model)],
        },
        fallbacks=[MessageHandler(filters.COMMAND, cancel)]
    )

    app.add_handler(conv_handler)
    logger.info("ðŸš€ Bot Ã§alÄ±ÅŸÄ±yor...")
    app.run_polling()

if __name__ == "__main__":
    main()


  
